require "db"
require "plugin"

db_user = ENV["POSTGRES_USER"] || "postgres"
db_name = ENV["POSTGRES_DB"]   || "goby_test"
db_host = ENV["POSTGRES_HOST"] || "0.0.0.0"

PG = DB.open("postgres", String.fmt("user=%s dbname=%s host=%s sslmode=disable", db_user, db_name, db_host))

plugin = Plugin.generate("db") do |p|
  p.import_pkg("", "github.com/jmoiron/sqlx")
  p.import_pkg("_", "github.com/lib/pq")
  p.link_function("sqlx", "Open")
end

conn, err = plugin.go_func("Open", "postgres", String.fmt("user=%s dbname=%s host=%s sslmode=disable", db_user, db_name, db_host))

if err
  puts(err.go_func("Error"))
  return nil
end

class PluginDB
  def initialize(conn)
    @conn = conn
  end

  def run(query, *args)
    r, err = @conn.go_func("Exec", query, *args)

    if err != nil
      puts(err.go_func("Error"))
    end
  end

  def exec(query, *args)
    id = 0
    err = @conn.go_func("QueryRow", String.fmt("%s RETURNING id", query), *args).go_func("Scan", id.ptr)

    if err != nil
      puts(err.go_func("Error"))
    else
      id
    end
  end

#   def query(query, *args)
#     rows, err = conn.go_func("Queryx", query, *args)

#     while rows.go_func("Next") do

#     end
#   end
end

PluginPG = PluginDB.new(conn)


PluginPG.run("create table if not exists list_items (
  id      serial primary key,
  title   varchar(40),
  checked boolean
)")

class ListItem
  attr_reader :id, :title, :checked, :error

  def initialize(params)
    @id      ||= params[:id]
    @title   ||= params[:title]
    @checked ||= params[:checked]
    @error   ||= params[:error]
  end

  def check
    self.class.plugin_db.exec('UPDATE list_items SET checked = true WHERE id = $1', @id)
    @checked = true
  end

  def uncheck
    self.class.plugin_db.exec('UPDATE list_items SET checked = false WHERE id = $1', @id)
    @checked = false
  end

  def update_title(title)
    self.class.plugin_db.exec('UPDATE list_items SET title = $1 WHERE id = $2', title, @id)
  end

  def destroy
    self.class.plugin_db.exec('DELETE FROM list_items WHERE id = $1', @id)
  end

  def valid?
    @error.nil?
  end


  def self.plugin_db
    PluginPG
  end

  def self.all
    PG.query("SELECT * FROM list_items ORDER BY id DESC")
  end

  def self.find(id)
    result = PG.query("SELECT * FROM list_items WHERE id = $1", id).first
    if result
      new({ id: result[:id], title: result[:title], checked: result[:checked] })
    end
  end

  def self.create(params = {})
    validates(params) do |result|
      if result[:error].nil?
        title   = params[:title]
        checked = params[:checked].to_i == 1
        resultID = self.plugin_db.exec("INSERT INTO list_items (title, checked) VALUES ($1, $2)", title, checked)
        new({ id: resultID, title: title, checked: checked })
      else
        new({ error: result[:error] })
      end
    end
  end

  def self.validates(params)
    if params.nil? || params[:title].nil?
      yield({ error: 'Title cannot be empty' })
    elsif params[:title].empty?
      yield({ error: 'Title cannot be empty' })
    else
      if params[:title].length > 40
        yield({ error: 'Title too long (should less than 40 characters)' })
      else
        yield({})
      end
    end
  end
end
